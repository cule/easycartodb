#!/bin/sh

PGPORT=
SQLAPI_PORT=
MAPAPI_PORT=
MAPNIK_VERSION=
ENVIRONMENT=development

STATUS="$0 $*"

# check requirements
node_version=`node --version`
if test $? -gt 0 -o -z "${node_version}"; then
  echo "Required node.js (version 0.10+) not found"
  exit 1
fi
# format: v0.10.26
node_version_minor=`echo "${node_version}" | sed 's/^v0\.\([0-9]*\).*/\1/'`
if test "$node_version_minor" -lt 10; then
  echo "Required node.js version is 0.10+, ${node_version} found"
  exit 1
fi

usage() {
  echo "Usage: $0 [OPTION]"
  echo 
  echo "Configuration:"
  echo "  --help                        display this help and exit"
  echo "  --with-pgport=NUM             access PostgreSQL server on TCP port NUM [$PGPORT]"
  echo "  --with-pguser=STRING          access PostgreSQL as user STRING [$PGUSER]"
  echo "  --with-sqlapi-port=NUM        access SQL-API server on TCP port NUM [$SQLAPI_PORT]"
  echo "  --with-mapapi-port=NUM        access MAP-API server on TCP port NUM [$MAPAPI_PORT]"
  echo "  --with-mapnik-version=STRING  set mapnik version string [$MAPNIK_VERSION]"
  #echo "  --environment=STRING          set output environment name [$ENVIRONMENT]"
}

echo "Configuring map-api... "
cd map-api;
./configure $@ || exit 1;
./configure $@ --environment=test || exit 1;
cd -

echo "Configuring sql-api... "
cd sql-api; ./configure $@ || exit 1; cd -

echo "Configuring rails-app... "
cd rails-app; ./configure $@ || exit 1; cd -
